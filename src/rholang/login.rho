// this insures that a map has been sent to the deployerId channel with a code dictionary entry
// the map will cantain your private stuff to be added if not already there.
contract login(isInitializedUri, return) = {
  new isInitializedReturn, lookup, registryLookup(`rho:registry:lookup`), 
      deployer(`rho:rchain:deployerId`), stdout(`rho:io:stdout`) in {

    // Lookup the isInitialized contract using the URI
    registryLookup!(isInitializedUri, *lookup) |
    
    for(@isInitialized <- lookup) {
      // Run the isInitialized contract
      isInitialized!(*isInitializedReturn) |
      
      for (@isInitializedResult <- isInitializedReturn) {
        match isInitializedResult {
          false => {
            // If not initialized, create a map with the key "codeDict" and an empty map as the value
            deployer!({ "codeDict": {} }) |
            stdout!("Login: Initialized map with 'codeDict' for deployer ID.") |
            return!(false)
          }
          true => {
            // If already initialized, do nothing and return true
            stdout!("Login: Deployer ID is already initialized.") |
            return!(true)
          }
        }
      }
    }
  }
}
