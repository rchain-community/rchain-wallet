contract initializeMapStore(return) = {
  new mapStore, registryInsert(`rho:registry:insertArbitrary`), 
      stdout(`rho:io:stdout`), deployer(`rho:rchain:deployerId`), 
      deployerRevAddrCh, isInitializedURI in {

    // Initialize the mapStore with an empty map
    mapStore!({}) |

    // Define the deployerRevAddr contract
    contract deployerRevAddr(return) = {
      new revAddrCh, deployerPubKeyBytesCh, 
          DeployerIdOps(`rho:rchain:deployerId:ops`) in {
        DeployerIdOps!("pubKeyBytes", *deployer, *deployerPubKeyBytesCh) |
        for (@deployerPubKeyBytes <- deployerPubKeyBytesCh) {
          RevAddress!("fromPublicKey", deployerPubKeyBytes, *revAddrCh) |
          for (@deployerRevAddr <- revAddrCh) {
            return!(deployerRevAddr)
          }
        }
      }
    } |

    // Define the isInitialized contract
    contract isInitialized(mapStoreURI, return) = {
      new lookup, registryLookup(`rho:registry:lookup`) in {
        registryLookup!(mapStoreURI, *lookup) |
        for(@mapStore <- lookup) {
          new deployerRevAddrCh in {
            deployerRevAddr!(*deployerRevAddrCh) |
            for(@deployerRevAddr <- deployerRevAddrCh) {
              for(map <- mapStore) {
                match map.get(deployerRevAddr) {
                  Nil => {
                    return!(false) |
                    stdout!(("Deployer REV address ", deployerRevAddr, 
                             " is not in the map."))
                  }
                  _ => {
                    return!(true) |
                    stdout!(("Deployer REV address ", deployerRevAddr, 
                             " is already initialized in the map."))
                  }
                }
              }
            }
          }
        }
      }
    } |

    // Deploy the isInitialized contract and get its URI
    registryInsert!(*isInitialized, *isInitializedURI) |

    for(@isInitializedUri <- isInitializedURI) {
      stdout!(("MapStore initialized. Returning mapStore channel and isInitialized URI: ", isInitializedUri)) |
      return!((*mapStore, isInitializedUri))
    }
  }
}
